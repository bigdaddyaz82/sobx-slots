// Full front-end JS for wallet connect + spin

const spinButton = document.getElementById('spinButton');
const connectWalletButton = document.getElementById('connectWallet');
const walletAddressSpan = document.getElementById('walletAddress');
const spinResultDiv = document.getElementById('spinResult');
const messageDiv = document.getElementById('message');
const balanceDiv = document.getElementById('balance');

let userWalletAddress = null;

// Connect MetaMask wallet on Base network
async function connectWallet() {
  if (!window.ethereum) {
    alert('MetaMask not detected. Please install MetaMask!');
    return;
  }

  try {
    // Request wallet connection
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    userWalletAddress = accounts[0];
    walletAddressSpan.textContent = userWalletAddress;
    console.log('Connected wallet:', userWalletAddress);

    // Optional: check network and alert if not Base
    const chainId = await window.ethereum.request({ method: 'eth_chainId' });
    // Base Mainnet chainId = '0xA4B1'
    if (chainId !== '0xA4B1') {
      alert('Please switch your MetaMask network to Base Mainnet.');
    }
  } catch (error) {
    console.error('Wallet connection failed:', error);
    alert('Wallet connection failed: ' + error.message);
  }
}

// Example function to get bet amount from UI (implement your own logic here)
function getSelectedBetAmount() {
  const betInput = document.getElementById('betAmount');
  return Number(betInput.value) || 0;
}

// Spin button handler
spinButton.addEventListener('click', async () => {
  const betAmount = getSelectedBetAmount();

  if (betAmount < 1) {
    alert('Select a valid bet amount!');
    return;
  }

  if (!userWalletAddress) {
    alert('Please connect your wallet first!');
    return;
  }

  try {
    const response = await fetch('http://localhost:3000/api/spin', { // Change URL if needed
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ bet: betAmount, wallet: userWalletAddress }),
    });

    if (!response.ok) throw new Error('Spin failed');

    const data = await response.json();

    // Update UI with spin result
    spinResultDiv.textContent = data.spinResult.join(' | ');
    messageDiv.textContent = data.message;
    balanceDiv.textContent = `Balance: ${data.balance} SOBEX`;

  } catch (error) {
    alert('Error spinning: ' + error.message);
  }
});

// Connect wallet button handler
connectWalletButton.addEventListener('click', connectWallet);

// Optional: automatically connect wallet if already connected
window.ethereum?.request({ method: 'eth_accounts' }).then(accounts => {
  if (accounts.length > 0) {
    userWalletAddress = accounts[0];
    walletAddressSpan.textContent = userWalletAddress;
  }
});
